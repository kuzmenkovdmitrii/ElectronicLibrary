@using ElLib.Web.CustomHelpers
@model ElLib.Web.Models.CreateAuthorModel

@{
    ViewBag.Title = "Добавить автора";
    Layout = "~/Views/Shared/_Main.cshtml";
}

<script>
    (function() {
        'use strict';
        window.addEventListener('load', function() {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function(form) {
                form.addEventListener('submit', function(event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>

<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-md-4">
            <div class="card">
                <h5 class="card-header info-color white-text text-center py-3">
                    <strong>Добавить автора</strong>
                </h5>
                <div class="card-body">
                        @using (Html.BeginForm("Create", "Author"))
                        {
                            <div class="md-form mt-3">
                                @Html.TextBoxFor(x => x.Name, new
                                {
                                    @class = "form-control",
                                    @placeholder = @Html.DisplayNameFor(x => x.Name),
                                })
                                @Html.ValidationMessageFor(x => x.MiddleName)
                            </div>

                            <div class="md-form mt-3">
                                @Html.TextBoxFor(x => x.LastName, new
                                {
                                    @class = "form-control",
                                    @placeholder = @Html.DisplayNameFor(x => x.LastName),
                                })
                                @Html.ValidationMessageFor(x => x.LastName)
                            </div>

                            <div class="md-form">
                                @Html.TextBoxFor(x => x.MiddleName, new
                                {
                                    @class = "form-control",
                                    @placeholder = @Html.DisplayNameFor(x => x.MiddleName),
                                })
                                @Html.ValidationMessageFor(x => x.MiddleName)
                            </div>

                            <div class="md-form">
                                @Html.TextBoxFor(x => x.Email, new
                                {
                                    @class = "form-control",
                                    @type = "email",
                                    @placeholder = @Html.DisplayNameFor(x => x.Email)
                                })
                                @Html.ValidationMessageFor(x => x.Email)
                            </div>

                            @Html.ValidationSummary(true)
                            <input type="submit" class="btn btn-outline-info btn-rounded btn-block" value="Добавить"/>
                        }
                </div>
            </div>
        </div>
    </div>
</div>